# -*- coding: utf-8 -*-
"""RAGGraph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/141ztvVR74pwYro0EVIdlBefaAG7ITo9V
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install --upgrade --quiet  langchain langchain-community langchain-openai langchain-experimental neo4j wikipedia tiktoken yfiles_jupyter_graphs
from dotenv import load_dotenv
import os
load_dotenv()

from langchain_core.runnables import (
    RunnableBranch,
    RunnableLambda,
    RunnableParallel,
    RunnablePassthrough,
)

from langchain_core.prompts import ChatPromptTemplate
from langchain_core.prompts.prompt import PromptTemplate

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

from typing import Tuple, List, Optional

from langchain_core.messages import AIMessage, HumanMessage
from langchain_core.output_parsers import StrOutputParser

from langchain_core.runnables import ConfigurableField

from yfiles_jupyter_graphs import GraphWidget
from neo4j import GraphDatabase

import os



from langchain_community.vectorstores import Neo4jVector

NEO4J_URI = os.getenv("NEO4J_URI")
NEO4J_USERNAME = os.getenv("NEO4J_USERNAME")
NEO4J_PASSWORD = os.getenv("NEO4J_PASSWORD")


os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
os.environ["NEO4J_URI"] = NEO4J_URI
os.environ["NEO4J_USERNAME"] = NEO4J_USERNAME
os.environ["NEO4J_PASSWORD"] = NEO4J_PASSWORD

from langchain_community.graphs import Neo4jGraph

graph = Neo4jGraph()


import os
from langchain.document_loaders import PyPDFLoader
from langchain.text_splitter import TokenTextSplitter






from langchain_openai import ChatOpenAI
llm=ChatOpenAI(temperature=0, model_name="gpt-4o-mini")

from langchain_experimental.graph_transformers import LLMGraphTransformer
llm_transformer = LLMGraphTransformer(llm=llm)



default_cypher = "MATCH (s)-[r:!MENTIONS]->(t) RETURN s,r,t LIMIT 50"

from yfiles_jupyter_graphs import GraphWidget
from neo4j import GraphDatabase





from langchain_community.vectorstores import Neo4jVector
from langchain_openai import OpenAIEmbeddings
vector_index = Neo4jVector.from_existing_graph(
    OpenAIEmbeddings(),
    search_type="hybrid",
    node_label="Document",
    text_node_properties=["text"],
    embedding_node_property="embedding"
)

graph.query("CREATE FULLTEXT INDEX entity IF NOT EXISTS FOR (e:__Entity__) ON EACH [e.id]")

from langchain_core.pydantic_v1 import BaseModel, Field
# Extract entities from text
class Entities(BaseModel):
    """Identifying information about entities."""

    names: List[str] = Field(
        ...,
        description="All the person, organization, or business entities that "
        "appear in the text",
    )

from langchain_core.prompts import ChatPromptTemplate
from langchain_core.prompts.prompt import PromptTemplate
prompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            "You are extracting organization and person entities from the text.",
        ),
        (
            "human",
            "Use the given format to extract information from the following "
            "input: {question}",
        ),
    ]
)

entity_chain = prompt | llm.with_structured_output(Entities)

from langchain_community.vectorstores.neo4j_vector import remove_lucene_chars

def generate_full_text_query(input: str) -> str:
    full_text_query = ""
    words = [el for el in remove_lucene_chars(input).split() if el]
    for word in words[:-1]:
        full_text_query += f" {word}~2 AND"
    full_text_query += f" {words[-1]}~2"
    return full_text_query.strip()

import uuid
from datetime import datetime

def book_appointment(entity_name: str, user_name: str, date: str, time: str):
    """
    Book an appointment with a specific entity (e.g., doctor, restaurant).
    If the slot is already taken, it returns an error message.
    """
    appointment_id = str(uuid.uuid4())  # Generate a unique appointment ID

    query = """
    MATCH (e:__Entity__ {id: $entity_name})
    OPTIONAL MATCH (e)-[:HAS_APPOINTMENT]->(a:Appointment {date: $date, time: $time})
    RETURN a
    """
    result = graph.query(query, {"entity_name": entity_name, "date": date, "time": time})

    if result and result[0]['a']:
        return f"Sorry, {entity_name} is not available at {time} on {date}."

    create_query = """
    MATCH (e:__Entity__ {id: $entity_name})
    CREATE (a:Appointment {id: $appointment_id, date: $date, time: $time, booked_by: $user_name})
    MERGE (e)-[:HAS_APPOINTMENT]->(a)
    RETURN a
    """
    graph.query(create_query, {
        "entity_name": entity_name,
        "appointment_id": appointment_id,
        "date": date,
        "time": time,
        "user_name": user_name
    })
    return f"Appointment booked with {entity_name} at {time} on {date}."

def check_availability(entity_name: str, date: str):
    """
    Returns a list of available time slots for a given entity on a specific date.
    """
    query = """
    MATCH (e:__Entity__ {id: $entity_name})
    OPTIONAL MATCH (e)-[:HAS_APPOINTMENT]->(a:Appointment {date: $date})
    RETURN COLLECT(a.time) AS booked_slots
    """
    result = graph.query(query, {"entity_name": entity_name, "date": date})

    all_slots = ["09:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", "02:00 PM", "03:00 PM", "04:00 PM"]  # Modify based on requirement
    booked_slots = result[0]['booked_slots'] if result else []
    available_slots = [slot for slot in all_slots if slot not in booked_slots]

    return f"Available slots for {entity_name} on {date}: {', '.join(available_slots) if available_slots else 'No available slots'}"

def structured_retriever(question: str) -> str:
    result = ""
    entities = entity_chain.invoke({"question": question})
    for entity in entities.names:
        response = graph.query(
            """CALL db.index.fulltext.queryNodes('entity', $query, {limit:2})
            YIELD node,score
            CALL {
              WITH node
              MATCH (node)-[r:!MENTIONS]->(neighbor)
              RETURN node.id + ' - ' + type(r) + ' -> ' + neighbor.id AS output
              UNION ALL
              WITH node
              MATCH (node)<-[r:!MENTIONS]-(neighbor)
              RETURN neighbor.id + ' - ' + type(r) + ' -> ' +  node.id AS output
            }
            RETURN output LIMIT 50
            """,
            {"query": generate_full_text_query(entity)},
        )
        result += "\n".join([el['output'] for el in response])
    return result

def retriever(question: str):
    print(f"Search query: {question}")
    structured_data = structured_retriever(question)
    unstructured_data = [el.page_content for el in vector_index.similarity_search(question)]
    final_data = f"""Structured data:
{structured_data}
Unstructured data:
{"#Document ". join(unstructured_data)}
    """
    return final_data

def retriever(question: str):
    print(f"Search query: {question}")

    structured_data = structured_retriever(question)
    unstructured_data = [el.page_content for el in vector_index.similarity_search(question)]

    # Extract entity name and date (simple approach, enhance as needed)
    entities = entity_chain.invoke({"question": question})
    entity_name = entities.names[0] if entities.names else None

    availability_info = ""
    if entity_name and "available" in question.lower():
        today = datetime.today().strftime('%Y-%m-%d')  # Get today's date
        availability_info = check_availability(entity_name, today)

    final_data = f"""Structured data:
{structured_data}
Unstructured data:
{"#Document ". join(unstructured_data)}
Availability Information:
{availability_info}
    """
    return final_data

_template = """Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question,
in its original language.
Chat History:
{chat_history}
Follow Up Input: {question}
Standalone question:"""

CONDENSE_QUESTION_PROMPT = PromptTemplate.from_template(_template)

def _format_chat_history(chat_history: List[Tuple[str, str]]) -> List:
    buffer = []
    for human, ai in chat_history:
        buffer.append(HumanMessage(content=human))
        buffer.append(AIMessage(content=ai))
    return buffer

_search_query = RunnableBranch(
    # If input includes chat_history, we condense it with the follow-up question
    (
        RunnableLambda(lambda x: bool(x.get("chat_history"))).with_config(
            run_name="HasChatHistoryCheck"
        ),  # Condense follow-up question and chat into a standalone_question
        RunnablePassthrough.assign(
            chat_history=lambda x: _format_chat_history(x["chat_history"])
        )
        | CONDENSE_QUESTION_PROMPT
        | ChatOpenAI(temperature=0)
        | StrOutputParser(),
    ),
    # Else, we have no chat history, so just pass through the question
    RunnableLambda(lambda x : x["question"]),
)

template = """Answer the question based only on the following context:
{context}

Question: {question}
Use natural language.
Answer:"""

prompt = ChatPromptTemplate.from_template(template)

chain = (
    RunnableParallel(
        {
            "context": _search_query | retriever,
            "question": RunnablePassthrough(),
        }
    )
    | prompt
    | llm
    | StrOutputParser()
)
#
# print(book_appointment("Dr. Alok Sardesai", "John Doe", "2025-03-22", "10:00 AM"))
#
# print(check_availability("Dr. Alok Sardesai", "2025-03-22"))





def answer(question: str):


    return chain.invoke({"question": question})

